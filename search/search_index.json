{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docs still in WIP...","text":""},{"location":"#introduction-and-installation","title":"Introduction and Installation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>ScratchConnect is a simple, easy-to-use Scratch API wrapper for Python</p> <p>It is used to connect the Scratch API and get/fetch the information and stats of users, studios, projects, forums, etc. from the Scratch website</p> <p>Other than just fetching the content, it can also perform some actions like:</p> <ul> <li>Following a user, studio or a forum topic</li> <li>Posting comments on a user's profile or a studio and a project </li> <li>Setting/Changing the cloud variables of a Project directly just using the Python code</li> <li>And much more...</li> </ul> <p>Warning</p> <p>To use this library, you should have the basic knowledge of Python. Using the library without any knowledge can be risky!</p> <p>Your login information and cookie values are kept safe and are not sent to any other API or website other than the trusted Scratch APIs</p> <p>The source code of the library can be found on Github</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python version <code>3.6+</code>. Possibly download the latest version</li> <li>Possibly a Scratch account (In case you need to perform some actions on the site)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the library, you can do either one of these:</p>"},{"location":"#using-pip","title":"Using pip","text":"<p>Type the following command in your <code>command prompt</code> or <code>terminal</code>: <pre><code>pip install scratchconnect\n</code></pre></p>"},{"location":"#directly-using-the-python-code","title":"Directly using the Python Code","text":"<p>Run the following code in Python: install.py<pre><code>import os\nos.system(\"pip install scratchconnect\")\n</code></pre></p> Troubles while Installing? <p>If you have any trobules while installing the library, then visit this link</p> <p>Note</p> <p>Make sure you update the library from time to time so that you install and use the latest stable version</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you are a beginner, check out the Getting Started guide</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#basic-setuplogin","title":"Basic Setup/Login","text":"<p>Once you have installed <code>ScratchConnect</code>, import that using the <code>import</code> statement in Python:</p> simple_import.py<pre><code>import scratchconnect # Import the library\n\n# Replace the \"Username\" and \"Password\" placeholders below with you actual Scratch username and password!\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\") # Create a new object of the ScratchConnect class\n</code></pre> <p>Important Note regarding the usage in online IDEs</p> <p>If you are using online IDEs like replit, please use the <code>environment</code> variables to store the sensitive information about your Scratch accounts like the <code>username</code>, <code>password</code> and <code>session id</code>.</p>"},{"location":"getting_started/#cookie-login","title":"Cookie Login","text":"How to get the session ID? <p>To get the session ID of your account, please read the Session ID guide</p> <p>To login with cookie (In case you don't want to login with your password), you can use the cookie login. Example:</p> cookie_login.py<pre><code>import scratchconnect\n\n# Set a cookie dictionary:\n\ncookie = {\n    \"Username\": \"&lt;YOUR USERNAME HERE&gt;\", # Replace the placeholder with your username\n    \"SessionID\": \"&lt;YOUR SESSION ID HERE&gt;\" # Replace the placeholder with your session ID\n}\n\nsession = scratchconnect.Scratchconnect(cookie=cookie) # Pass the \"cookie\" dictionary to the cookie parameter of the class\n</code></pre> <p>Or more better example would be to store the session ID in a file and then read that in the program. To store the session ID in a file, use this code. Example:</p> cookie_login.py<pre><code>import scratchconnect\n\nsession_id = \"\"\nwith open(\"session_id.txt\", \"r\") as file:\n    session_id = file.read()\n\ncookie = {\n    \"Username\": \"&lt;YOUR USERNAME HERE&gt;\", # Replace the placeholder with your username\n    \"SessionID\": session_id\n}\n\nsession = scratchconnect.Scratchconnect(cookie=cookie) # Pass the \"cookie\" dictionary to the cookie parameter of the class\n</code></pre> <p>Note</p> <p>Once you login using a cookie, the library may give a warning just to inform you that some features of the library may not work if the cookie values are wrong!</p> <p>Important Note regarding the use of Cookie Login</p> <p>If you are using cookie login in online IDEs like replit, please use the <code>environment</code> variables to store the sensitive information about your Scratch accounts like the <code>username</code>, <code>password</code> and <code>session id</code>.</p>"},{"location":"getting_started/#advanced-cookie-login","title":"Advanced Cookie Login","text":"How to get the session ID? <p>To get the session ID of your account, please read the Session ID guide</p> <p>This feature is the combination of both the <code>Basic</code> and the <code>Cookie</code> login</p> <p>Using this feature, the library will automatically login using a cookie in case the basic login was not successful</p> <p>Example to use this:</p> advanced_cookie_login.py<pre><code>import scratchconnect\n\ncookie = {\n    \"Username\": \"&lt;YOUR USERNAME HERE&gt;\",\n    \"SessionID\": \"&lt;YOUR SESSION ID HERE&gt;\"\n}\n\nsession = scratchconnect.ScratchConnect(username=\"Username\", password=\"Password\", cookie=cookie, auto_cookie_login=True) # Set the \"auto_cookie_login\" parameter of the ScratchConnect class to \"True\" to enable the advanced login\n</code></pre> <p>The above code will perform the cookie login if the basic login was unsuccessful!</p> <p>Note</p> <p>Once you login using a cookie, the library may give a warning just to inform you that some features of the library may not work if the cookie values are wrong!</p> <p>Important Note regarding the use of Advanced Cookie Login</p> <p>If you are using cookie login in online IDEs like replit, please use the <code>environment</code> variables to store the sensitive information about your Scratch accounts like the <code>username</code>, <code>password</code> and <code>session id</code>.</p>"},{"location":"getting_started/#no-login","title":"No login!","text":"<p>If you don't want to perform the actions such as posting a comment, following a user, etc. and only want to <code>GET</code> the data from the Scratch API, then you can use the library without any login!</p> <p>See an example:</p> no_login.py<pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect() # Leave all the parameters empty to use the library without login!\n</code></pre> <p>Note</p> <p>If you use the library without login, it will just give a <code>warning</code> that the basic and cookie login is failed. This is normal and you can still continue running the code/ using the library.</p>"},{"location":"getting_started/#login-in-replit","title":"Login in replit","text":"<p>To login in replit, you have to use another type of login as the Scratch API had recently blocked the requests coming from replit</p> <p>Read the Login in replit guide</p> <p>Important Note</p> <p>ScratchConnect will not allow a banned account to login and will raise an error.</p>"},{"location":"login_in_replit/","title":"Login in Replit","text":""},{"location":"login_in_replit/#setup","title":"Setup","text":"<p>To login on replit, you first need to store the session ID of you account in an <code>environment</code> variable!</p> <p>Follow the steps:</p> <ol> <li>Read the session ID guide to get your session ID</li> <li>Store the session ID in an <code>environment</code> variable in replit. Read replit's guide if you need any help</li> <li>Read/Call the value of your environment variable in your code. A small guide can be seen here</li> </ol> <p>And you're done! Now you can use the Actual login as documented below:</p>"},{"location":"login_in_replit/#actual-replit-login","title":"Actual Replit Login","text":"<p>To login in replit and other online IDEs, using the following feature:</p> login_in_replit.py<pre><code>import scratchconnect\n\n# Set a cookie dictionary:\n\ncookie = {\n    \"Username\": \"&lt;YOUR USERNAME HERE&gt;\", # Replace the placeholder with your username\n    \"SessionID\": \"&lt;YOUR SESSION ID HERE&gt;\" # Replace the placeholder with your session ID\n}\n\nsession = scratchconnect.ScratchConnect(online_ide_cookie=cookie) # Pass the \"cookie\" dictionary to the online_ide_cookie parameter of the class\n</code></pre> <p>Important Note</p> <p>If you login in replit, using the <code>Online IDE Login</code> feature, only the <code>GET</code> type of requests are performed, i.e., you won't be able to perform the interactions to the Scratch website like following a user, posting a comment, etc.</p> <p>This is because this login feature uses a proxy to request the Scratch API and your login and sensitive user information suchh as <code>password</code> and <code>session_id</code>, etc. is not sent to the proxy. This is done to keep your data safe.</p>"},{"location":"session_id/","title":"Session ID Guide","text":"What is session ID? <p>Sesssion ID is a type of cookie value that is set by the Scratch website on your local computer</p> <p>The website uses the Session ID as a type of security check, i.e, for example, if you follow a user or post a comment, the Scratch website first checks if the session ID of your account is correct and then allows you to perform that action</p> <p>The Scratch API not only uses the session ID to validate/check the requests but also certain other cookie values which are equally important as the session ID but the ScratchConnect library requires only the session ID using which it fetches the other cookie types!</p> <p>Note: The session ID automatically changes (maybe sometimes) when you login to the Scratch website</p>"},{"location":"session_id/#steps-to-get-the-session-id","title":"Steps to get the Session ID","text":"<p>Following are the 2 ways using which you can get the session ID of your account:</p>"},{"location":"session_id/#using-the-python-code","title":"Using the Python Code","text":"<p>You can login using ScratchConnect locally on your computer, using the code below:</p> get_session_id.py<pre><code>import scratchconnect\n\n# Replace the placeholders below with you actual Scratch information\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nwith open(\"session_id.txt\", \"w\") as file:\n    file.write(session.session_id) # Write the session ID in a text file called \"session_id.txt\"\n\n# You can open the text file and read/copy the session ID\n</code></pre>"},{"location":"session_id/#from-your-browser","title":"From your browser","text":"<p>Follow the steps:</p> <p>(It is advised to follow only the steps below when you open the developer tools to keep your account secure, if you don't know what you're doing. Remember: Never share your session ID with anyone!)</p> <ol> <li>Login to the Scratch website</li> <li>Open the developer tools by right clicking anywhere on the page and by clicking the \"Inspect\" option. You can open the developer tools on <code>Windows</code> OS using the shortcut <code>Control + Shift + C</code> and on <code>Mac</code> OS using the shortcut <code>Command + Option + C</code> depending on your browser</li> <li> <p>Once you're done, follow the steps according to your browser:</p> <p>For <code>Firefox</code> browser: </p> <p>Click the <code>Storage</code> tab; In the <code>Cookies</code> section click the Scratch website's name. There you will find a key with the name as <code>scratchsessionsid</code>. Copy the value corresponding value to that key. This is your session ID</p> <p>Image (The cookie values are censored(in red) for security): </p> <p>For <code>Chrome</code> browser: </p> <p>Click the <code>Application</code> tab; In the <code>Storage</code> section, click the <code>Cookies</code> option and then the Scratch website's name. There you will find a key with the name as <code>scratchsessionsid</code>. Copy the value corresponding value to that key. This is your session ID</p> <p>Image (The cookie values are censored(in red) for security): </p> </li> </ol>"},{"location":"session_id/#final-important-note","title":"Final Important Note","text":"<p>The session ID is very important. Do NOT share it with anyone.</p> <p>Also, remember to store the session ID in <code>environment</code> variables if you are using/running the code in online IDEs like replit!</p> <p>While sharing your code, make sure that you remove the sensitive information from your file!</p>"},{"location":"the_scratchconnect_class/","title":"The ScratchConnect class","text":"<p>The <code>ScratchConnect</code> class is the main class of the library. It is essential in every program using the library.</p> <p>Once you finished the login part, you can now use the library!</p> <p>Example to get the data of the logged in user:</p> user_data.py<pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nall_data = session.all_data() # Get the profile data of the logged in user in 'dict' format\n\nprint(all_data)\n</code></pre> But what if I haven't logged in using ScratchConnect? How do I get the user data? <p>No worries :)</p> <p>Try the following code:</p> nologin_user_data.py<pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect() # Leave the arguments blank\n\nuser = session.connect_user(\"griffpatch\") # Connect a user. For eg., \"griffpatch\"\n\nall_data = user.all_data() # Get the profile data of the user in 'dict' format\n\nprint(all_data)\n</code></pre>"},{"location":"the_scratchconnect_class/#propertiesparameters","title":"Properties/Parameters","text":""},{"location":"the_scratchconnect_class/#username-str-none","title":"<code>username: str | None</code>","text":"<p>The username to login</p>"},{"location":"the_scratchconnect_class/#password-str-none","title":"<code>password: str | None</code>","text":"<p>The password of that username to login</p>"},{"location":"the_scratchconnect_class/#cookie-dict-none","title":"<code>cookie: dict | None</code>","text":"<p>The cookie if you are logging in with cookie</p>"},{"location":"the_scratchconnect_class/#auto_cookie_login-bool","title":"<code>auto_cookie_login: bool</code>","text":"<p>Set it to <code>True</code> if you are using advanced cookie login</p>"},{"location":"the_scratchconnect_class/#online_ide_cookie-dict-none","title":"<code>online_ide_cookie: dict | None</code>","text":"<p>The cookie if you are logging in using an online IDE</p>"},{"location":"the_scratchconnect_class/#methods","title":"Methods","text":"<p>Important Note</p> <p>Some of the methods below use the Scratch DB API to fetch the information which may not be always up to date and may raise errors if the Scratch DB API is down!</p> <p>Some of the methods below require login either using <code>username and password</code> or <code>cookie</code> and will raise an error if you use those methods/functions without login!</p>"},{"location":"the_scratchconnect_class/#update_data","title":"<code>update_data()</code>","text":"<p>The function to update the data of the logged in user</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nsession.update_data()\n</code></pre>"},{"location":"the_scratchconnect_class/#id","title":"<code>id()</code>","text":"<p>Returns the ID of the logged in user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.id())\n</code></pre>"},{"location":"the_scratchconnect_class/#thumbnail_url","title":"<code>thumbnail_url()</code>","text":"<p>Returns the thumbnail URL data of the logged in user in <code>dict</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.thumbnail_url())\n</code></pre>"},{"location":"the_scratchconnect_class/#messages_count","title":"<code>messages_count()</code>","text":"<p>Returns the messages count of the logged in user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.messages_count())\n</code></pre>"},{"location":"the_scratchconnect_class/#work","title":"<code>work()</code>","text":"<p>Returns the 'What I am working on' section of the profile in <code>str</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.work())\n</code></pre>"},{"location":"the_scratchconnect_class/#bio","title":"<code>bio()</code>","text":"<p>Returns the 'About me' section of the profile in <code>str</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.bio())\n</code></pre>"},{"location":"the_scratchconnect_class/#status","title":"<code>status()</code>","text":"<p>Returns whether the logged in user has a <code>Scratcher</code> or a <code>Non Scratcher</code> status in <code>str</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.status())\n</code></pre>"},{"location":"the_scratchconnect_class/#joined_date","title":"<code>joined_date()</code>","text":"<p>Returns the joined date of a Scratch profile in <code>str</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.joined_date())\n</code></pre>"},{"location":"the_scratchconnect_class/#country","title":"<code>country()</code>","text":"<p>Returns the country of a Scratch profile in <code>str</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.country())\n</code></pre>"},{"location":"the_scratchconnect_class/#followers_count","title":"<code>followers_count()</code>","text":"<p>Returns the follower count of a user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.followers_count())\n</code></pre>"},{"location":"the_scratchconnect_class/#following_count","title":"<code>following_count()</code>","text":"<p>Returns the following count of a user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.following_count())\n</code></pre>"},{"location":"the_scratchconnect_class/#total_views","title":"<code>total_views()</code>","text":"<p>Returns the total views count of all the shared projects of a user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.total_views())\n</code></pre>"},{"location":"the_scratchconnect_class/#total_loves_count","title":"<code>total_loves_count()</code>","text":"<p>Returns the total loves count of all the shared projects of a user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.total_loves_count())\n</code></pre>"},{"location":"the_scratchconnect_class/#total_favourites_count","title":"<code>total_favourites_count()</code>","text":"<p>Returns the total favourites count of all the shared projects of a user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.total_favourites_count())\n</code></pre>"},{"location":"the_scratchconnect_class/#projects_count","title":"<code>projects_count()</code>","text":"<p>Returns the total shared projects of the user in <code>int</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.projects_count())\n</code></pre>"},{"location":"the_scratchconnect_class/#featured_data","title":"<code>featured_data()</code>","text":"<p>Returns the featured project data of the Scratch profile in <code>dict</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.featured_data())\n</code></pre>"},{"location":"the_scratchconnect_class/#projectsall-limit-offset","title":"<code>projects(all, limit, offset)</code>","text":"<p>Returns the list of shared projects of a user in <code>list</code> format</p> <p>Parameters</p> Name Description Required Default Value all Set it to True if you want to fetch all the projects of that user No <code>False</code> limit The number of projects you want to fetch No 20 offset The number of projects to be skipped from the beginning No 0 Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.projects(all=False, limit=20, offset=0))\n</code></pre>"},{"location":"the_scratchconnect_class/#followingall-limit-offset","title":"<code>following(all, limit, offset)</code>","text":"<p>Returns the list of Scratchers the user is following in <code>list</code> format</p> <p>Parameters</p> Name Description Required Default Value all Set it to True if you want to fetch all the following of that user No <code>False</code> limit The number of users you want to fetch No 20 offset The number of users to be skipped from the beginning No 0 Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.following(all=False, limit=20, offset=0))\n</code></pre>"},{"location":"the_scratchconnect_class/#followersall-limit-offset","title":"<code>followers(all, limit, offset)</code>","text":"<p>Returns the list of Scratchers the user is followed by in <code>list</code> format</p> <p>Parameters</p> Name Description Required Default Value all Set it to True if you want to fetch all the followers of that user No <code>False</code> limit The number of users you want to fetch No 20 offset The number of users to be skipped from the beginning No 0 Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.followers(all=False, limit=20, offset=0))\n</code></pre>"},{"location":"the_scratchconnect_class/#favouritesall-limit-offset","title":"<code>favourites(all, limit, offset)</code>","text":"<p>Returns the list of projects the user has favourited in <code>list</code> format</p> <p>Parameters</p> Name Description Required Default Value all Set it to True if you want to fetch all the favourite projects of that user No <code>False</code> limit The number of projects you want to fetch No 20 offset The number of projects to be skipped from the beginning No 0 Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.favourites(all=False, limit=20, offset=0))\n</code></pre>"},{"location":"the_scratchconnect_class/#user_follower_historyall-limit-offset","title":"<code>user_follower_history(all, limit, offset)</code>","text":"<p>Returns the follower history of the user in <code>list</code> format</p> <p>Parameters</p> Name Description Required Default Value segment The length of time between each segment No \"\" range Of how far back to get history No 30 Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.user_follower_history(segment=\"\", range=30))\n</code></pre>"},{"location":"the_scratchconnect_class/#all_data","title":"<code>all_data()</code>","text":"<p>Returns all the data of the user in <code>dict</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.all_data())\n</code></pre> <p>Note</p> <p>Remember to call the <code>update_data()</code> function when you need to update the data!</p>"},{"location":"the_scratchconnect_class/#ocular_data","title":"<code>ocular_data()</code>","text":"<p>Returns the ocular data of the user in <code>dict</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.ocular_data())\n</code></pre>"},{"location":"the_scratchconnect_class/#aviate_data","title":"<code>aviate_data()</code>","text":"<p>Returns the aviate data of the user in <code>dict</code> format</p> <p>Parameters</p> Name Description Required Default Value code True to get the code of the status No <code>False</code> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.aviate_data(code=False))\n</code></pre>"},{"location":"the_scratchconnect_class/#comments","title":"<code>comments()</code>","text":"<p>Returns the comments on the user's profile</p> <p>Parameters</p> Name Description Required Default Value limit The limit No 5 (recommended) page The page No 1 Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.comments(limit=5, page=1))\n</code></pre>"},{"location":"the_scratchconnect_class/#messages","title":"<code>messages()</code>","text":"<p>Returns the messages of the logged in user in <code>dict</code> format</p> <p>Parameters</p> Name Description Required Default Value all Set it to <code>True</code> if you want to fetch all the messages No <code>False</code> limit The limit of messages you want to get if you're not using the <code>all</code> parameter No 20 offset The number of messages to skip from the beginning No 0 filter Filter the messages No <code>\"\"</code> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.messages(all=True)) # Get  all the messages\n\nprint(session.messages(limit=10, offset=0)) # Get the first 10 messages\n\nprint(session.messages(limit=10, offset=5)) # Get 10 messages skipping 5 from the beginning\n</code></pre>"},{"location":"the_scratchconnect_class/#clear_messages","title":"<code>clear_messages()</code>","text":"<p>Clears the messages (count) of the logged in user and returns the response in <code>str</code> format</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.clear_messages())\n</code></pre>"},{"location":"the_scratchconnect_class/#my_stuff_projects","title":"<code>my_stuff_projects()</code>","text":"<p>Get the projects in the MyStuff section of the logged in user</p> <p>Parameters</p> Name Description Required Default Value order The order No all page The page No 1 sort_by Sort by a specific case No <code>\"\"</code> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.my_stuff_projects())\n</code></pre>"},{"location":"the_scratchconnect_class/#toggle_commenting","title":"<code>toggle_commenting()</code>","text":"<p>Toggle the commenting of the profile</p> Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.toggle_commenting())\n</code></pre>"},{"location":"the_scratchconnect_class/#follow_userusername","title":"<code>follow_user(username)</code>","text":"<p>Follow a user</p> <p>Parameter</p> Name Description Required Default Value username The username to follow Yes - Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.follow_user(username=\"griffpatch\"))\n</code></pre>"},{"location":"the_scratchconnect_class/#unfollow_userusername","title":"<code>unfollow_user(username)</code>","text":"<p>UnFollow a user</p> <p>Parameter</p> Name Description Required Default Value username The username to unfollow Yes - Example <pre><code>import scratchconnect\n\nsession = scratchconnect.ScratchConnect(\"Username\", \"Password\")\n\nprint(session.unfollow_user(username=\"griffpatch\"))\n</code></pre>"}]}